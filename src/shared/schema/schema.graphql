type User {
  id: String,
  firstName: String,
  lastName: String,
  username: String,
  email: String,
  password: String,
}

type Task {
  id: String,
  title: String,
  description: String,
  complete: Boolean,
  owner: String,
}

type SuccessfulHTTPResponse {
  status: String!,
  message: String!,
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query {
  getAllUsers: [User],
  getAllTasks: [Task],
  getUserById(userId: String!): User,
  getUserTasks(userId: String!): [Task],
}

type Mutation {
  registerUser(username: String!, email: String!, firstName: String!, lastName: String!, password: String!): SuccessfulHTTPResponse,
  createTask(user: String!, title: String!, description: String!): SuccessfulHTTPResponse,
  updateTask(taskId: String!, complete: Boolean!, description: String!, title: String!): SuccessfulHTTPResponse,
  deleteTask(taskId: String!): SuccessfulHTTPResponse,
  markTaskAsComplete(taskId: String!): SuccessfulHTTPResponse,
  markTaskAsIncomplete(taskId: String!): SuccessfulHTTPResponse,
  removeUser(userId: String!): SuccessfulHTTPResponse,
}